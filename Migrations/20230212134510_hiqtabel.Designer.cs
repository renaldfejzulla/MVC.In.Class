// <auto-generated />
using System;
using MVC.In.Class.DataAcessLayer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC.In.Class.Migrations
{
    [DbContext(typeof(LibraryDBContext))]
    [Migration("20230212134510_hiqtabel")]
    partial class hiqtabel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthYear")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9021b75-2caa-4fc8-a27b-e91155cd585a"),
                            BirthYear = new DateTime(1913, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 2, 12, 14, 45, 10, 59, DateTimeKind.Local).AddTicks(3295),
                            IsDeleted = false,
                            Name = "JJR Tolkien"
                        });
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.AuthorBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f476b87a-8c95-4565-bdc2-d0fb96c11b12"),
                            AuthorId = new Guid("c9021b75-2caa-4fc8-a27b-e91155cd585a"),
                            BookId = new Guid("8669aa2f-649c-47ca-ace5-a78ff2b788df"),
                            DateCreated = new DateTime(2023, 2, 12, 14, 45, 10, 59, DateTimeKind.Local).AddTicks(3376),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PublishedYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserLoginId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserLoginId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8669aa2f-649c-47ca-ace5-a78ff2b788df"),
                            DateCreated = new DateTime(2023, 2, 12, 14, 45, 10, 59, DateTimeKind.Local).AddTicks(3321),
                            IsDeleted = false,
                            Price = 1500.0,
                            PublishedYear = new DateTime(1980, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Hobbit",
                            UserLoginId = new Guid("d1465d0c-2d00-44aa-a0d0-634efd18b4a7")
                        },
                        new
                        {
                            Id = new Guid("4ef518aa-1cb9-4ca1-9585-e66d5049dd3c"),
                            DateCreated = new DateTime(2023, 2, 12, 14, 45, 10, 59, DateTimeKind.Local).AddTicks(3341),
                            IsDeleted = false,
                            Price = 1500.0,
                            PublishedYear = new DateTime(1980, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kronik ne gur",
                            UserLoginId = new Guid("d1465d0c-2d00-44aa-a0d0-634efd18b4a7")
                        },
                        new
                        {
                            Id = new Guid("12f5c24b-a701-4147-839f-27aa503e2215"),
                            DateCreated = new DateTime(2023, 2, 12, 14, 45, 10, 59, DateTimeKind.Local).AddTicks(3354),
                            IsDeleted = false,
                            Price = 1500.0,
                            PublishedYear = new DateTime(1980, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter",
                            UserLoginId = new Guid("d1465d0c-2d00-44aa-a0d0-634efd18b4a7")
                        });
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.BookRentals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndRentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartRentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ClientId");

                    b.ToTable("BookRentals");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1465d0c-2d00-44aa-a0d0-634efd18b4a7"),
                            DateCreated = new DateTime(2023, 2, 12, 14, 45, 10, 59, DateTimeKind.Local).AddTicks(2977),
                            IsDeleted = false,
                            Password = "123",
                            Roles = "admin",
                            UserName = "edi"
                        });
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.AuthorBook", b =>
                {
                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Book", b =>
                {
                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.UserLogin", "UserLogin")
                        .WithMany("Books")
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.BookRentals", b =>
                {
                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Book", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.UserLogin", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
