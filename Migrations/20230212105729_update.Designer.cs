// <auto-generated />
using System;
using MVC.In.Class.DataAcessLayer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC.In.Class.Migrations
{
    [DbContext(typeof(LibraryDBContext))]
    [Migration("20230212105729_update")]
    partial class update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthYear")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d37d2b5-706f-4138-ad8d-3883dc05b458"),
                            BirthYear = new DateTime(1913, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 2, 12, 11, 57, 29, 87, DateTimeKind.Local).AddTicks(7448),
                            IsDeleted = false,
                            Name = "JJR Tolkien"
                        });
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.AuthorBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e95759b0-fdbd-4e15-95d0-405ef19b4fb0"),
                            AuthorId = new Guid("4d37d2b5-706f-4138-ad8d-3883dc05b458"),
                            BookId = new Guid("fe9c11e7-937a-47fd-b25f-24a19e7008d7"),
                            DateCreated = new DateTime(2023, 2, 12, 11, 57, 29, 87, DateTimeKind.Local).AddTicks(7573),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PublishedYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserLoginId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserLoginId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe9c11e7-937a-47fd-b25f-24a19e7008d7"),
                            DateCreated = new DateTime(2023, 2, 12, 11, 57, 29, 87, DateTimeKind.Local).AddTicks(7494),
                            IsDeleted = false,
                            Price = 1500.0,
                            PublishedYear = new DateTime(1980, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Hobbit",
                            UserLoginId = new Guid("887ae534-6e47-4019-8be4-4e0954ec3e4a")
                        },
                        new
                        {
                            Id = new Guid("5400ffd5-c85b-4591-8200-534a6f6044be"),
                            DateCreated = new DateTime(2023, 2, 12, 11, 57, 29, 87, DateTimeKind.Local).AddTicks(7535),
                            IsDeleted = false,
                            Price = 1500.0,
                            PublishedYear = new DateTime(1980, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kronik ne gur",
                            UserLoginId = new Guid("887ae534-6e47-4019-8be4-4e0954ec3e4a")
                        },
                        new
                        {
                            Id = new Guid("e6f65354-67d5-4346-a549-859f5ee7a7a6"),
                            DateCreated = new DateTime(2023, 2, 12, 11, 57, 29, 87, DateTimeKind.Local).AddTicks(7549),
                            IsDeleted = false,
                            Price = 1500.0,
                            PublishedYear = new DateTime(1980, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter",
                            UserLoginId = new Guid("887ae534-6e47-4019-8be4-4e0954ec3e4a")
                        });
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.BookRentals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndRentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartRentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ClientId");

                    b.ToTable("BookRentals");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("887ae534-6e47-4019-8be4-4e0954ec3e4a"),
                            DateCreated = new DateTime(2023, 2, 12, 11, 57, 29, 87, DateTimeKind.Local).AddTicks(6992),
                            IsDeleted = false,
                            Password = "123",
                            Roles = "admin",
                            UserName = "edi"
                        });
                });

            modelBuilder.Entity("MVC.In.Class.Models.BooksDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PublishedYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BooksDto");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.AuthorBook", b =>
                {
                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Book", b =>
                {
                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.UserLogin", "UserLogin")
                        .WithMany("Books")
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.BookRentals", b =>
                {
                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC.In.Class.DataAcessLayer.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.Book", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("MVC.In.Class.DataAcessLayer.Entities.UserLogin", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
